2011-01-11  GoldenKevin  (revision 1)

	Automatically created /trunk directory. We recommend you to put all your
	code there

2011-01-22  GoldenKevin  (revision 2)

	* Initial import. Things currently working:
		* Inter server communications between a central server and remote
		servers.
		* Loading of Item.wz, Map.wz, Mob.wz, Reactor.wz, Skill.wz, and
		String.wz data files in KVJ format. MCDB support soon to come with XML
		and WZ support planned in the long run.
		* Game, login, and shop servers can listen and decode packets received
		from MapleStory clients, but do not process anything yet. There has been
		a little headway in login server packet handling.
		* A code stub for a telnet acceptor on the center server. It accepts
		connections but there are many things that need to be done before I can
		even think about implementing commands on it.
	Some more work has to be done on the actual client and server communications
	frameworks, but once that is done, I will start working on implementing
	packet handlers in the login server first. A lot of low level code was taken
	from OdinMS-derived sources in order to speed up development. Thanks guys!

2011-01-22  GoldenKevin  (revision 3)

	* Added AGPLv3 license headers to all Java source files.

2011-01-23  GoldenKevin  (revision 4)

	* Removed "argonms.*.data.dir" for all client listening servers because it
	is no longer used (Please specify the data directory with the System
	property "argonms.data.dir")
	* Added MCDB loading for maps data. Item data is soon to come followed by
	the rest.
	* Added error checking for KVJ loaders. When a piece of data doesn't exist,
	the entry in the caches will be null and the load methods will no longer
	throw FileNotFoundExceptions.
	* String data now has to be preloaded on any server that uses it.
	* Every data cache object now has a protected access modifier for all of
	their mutator methods and for their constructor, while only their accessor
	methods have public access. This way, the dynamically loaded data containing
	these static cache objects cannot modify them for the other dynamic data
	that use the same cache.

2011-01-23  GoldenKevin  (revision 5)

	* Finished MCDB data loader for items.
	* Merged WzDatabaseConnection into DatabaseConnection.
	* Refactored DatabaseConnection to be more efficient I suppose?

2011-01-25  GoldenKevin  (revision 6)

	* Added MCDB data loading for strings.
	* Please note that a new version of KVJ compiler is released. Please
	recompile all KVJ files!
	* I think I forgot all about how ThreadLocal worked when I created those
	MCDB data loading classes... anyway, the getWzConnection() is called at each
	method call now instead of being stored as a single instance variable for
	all threads.
	* Made constructors of all data loaders to protected and added
	(instance == null) check for every setInstance method just so nobody
	"accidentally" creates more than one instance of those singleton classes. I
	don't mistake you guys as idiots, it's just a safe programming practice.
	* Added MCDB loading for mobs and skills and enabled loading for strings
	(a whoops from the last revision).
	* All data loaders have an canLoad() method now to check if the data for an
	object exists (all except for String apparently). Note that this is not an
	exists() method, i.e. MCDB skills will return true even if the skill does
	not exist as long as there are other skills with the same 3 digit prefix. It
	only determines whether a piece of data can be loaded.
	* In Skill data loader, the player skill operations are now separated from
	those of mob skills, as they rightfully should be.
	* I'm really getting ahead of myself by adding a MapFactory instance
	variable in argonms.game.WorldChannel.

2011-01-29  GoldenKevin  (revision 7)

	* Made some progress on the Telnet listener. Now special telnet chars
	( > 0x7F) are handled properly and won't be in the ASCII string. Just a few
	more tweaks to the way some ASCII chars are handled and it will be ready...
	* Fixed NullPointerException in SkillDataLoader.
	* Fixed MCDB loading of mobs and skills.
	* Added classes for inventory (items, equips, pets, rings, etc.) and moved
	Player class from argonms.game to argonms.character.
	* Support for KvjCompiler r14. Changes include Character.wz compiling and
	reduced size of Mob files.
	* Character.wz is now processed in KvjItemDataLoader. Taming Mob IDs are now
	read in McdbItemDataLoader as well. In McdbItemDataLoader, equips can now be
	made tradeBlocked.

2011-02-04  GoldenKevin  (revision 8)

	* Fixed some inconsistencies when passing java.awt.Point/(x,y) parameters to
	mutator methods in data loader objects. Now all parameters are passed as
	x and y integers to reduce imports.
	* Renamed IItem to InventorySlot. Equips don't have any bonuses for "hands"
	so that was removed from the Equip class. Inventory class now implemented.
	Pets now are implemented and Rings have been updated.
	* Player class has been implemented enough for Login Server usage. Some code
	was copied directly from OdinMS, so some stuff needed for the Game Server
	do not work yet or are inefficient (ahem, MapleMap.nearestSpawnPoint).
	* Login server now has matured to a point where the client can be
	transferred to the game server! Characters can be created and loaded from
	world charlists and global charlists. Fixed some
	ArrayIndexOutOfBoundExceptions caused by off by one errors.
	* Refactored Game Server accept in Login Server. Now the IP address of each
	world is resolved upon their connection so we won't have to do it every time
	a client selects a character in the Login Server.
	* GameClient has been updated. There are small stubs of code for Game Server
	loading of a player (copied directly from OdinMS), although there's still a
	long way before the player can actually be placed in a map.
	* Added a CheatTracker class that does... nothing! Yet.

2011-02-12  GoldenKevin  (revision 9)

	* Fixed logging of unhandled packets from clients.
	* Moved argonms.net.client.ClientLoginPacketProcessor
	to argonms.login.ClientLoginPacketProcessor
	* Moved argonms.net.client.ClientGamePacketProcessor
	to argonms.game.ClientGamePacketProcessor
	* Moved argonms.net.client.ClientShopPacketProcessor
	to argonms.shop.ClientShopPacketProcessor
	* Moved several constants from KvjEffects to StatEffects because their use
	wasn't limited to KVJ effects loading.
	* Added accessor methods to MobSkillEffect and StatEffects. Lt and Rb
	mutator methods for MobSkillEffects now accept two shorts instead of a Point
	* Fixed negative array index size occurring when packet length was greater
	than the maximum value (127) of a signed 8-bit integer (byte).
	* Fixed finding the next free item position in inventory
	(Inventory.getFreeSlots). First item is 1, not 0!
	* Added Taming Mobs/Mounts as another inventory item type. Hopefully, this
	should be the last one as the inheritance for InventorySlot is getting
	complicated...
	* Player can now enter a map in the GameServer. While they can move, they
	can't see other players and other players can't see them. They cannot
	interact with anything or change maps/channels and there are no spawns for
	NPCs/Mobs. All of these additions will come gradually.

2011-02-19  GoldenKevin  (revision 10)

	* Fixed bug in LittleEndianByteArrayWriter. If a large enough byte array was
	copied to a small buffer, there was an ArrayIndexOutOfBoundsException. Also,
	a one byte long LittleEndianByteArrayWriter can now grow!
	* Renamed MapleMap to GameMap.
	* You can now see other players moving around in a map (you can't see them
	attacking yet though). NPCs are visible (at least in map 0), but I think
	mobs currently crash clients. Portals still don't work yet... A lot of
	credit should go to OdinMS for this particular update!
	* Made some progress on making a scripting interface for NPCs. I think I
	might actually write my own language if I don't find ways to circumvent my
	current issues with it. A sample 2100.js script is included.
	* Added code stubs for NPC shops. It should be easy to implement later on.
	* Refactored map object related code. Players now keep their charid in the
	MapObject class (referred to as an "object id"). I think MapObjects are a
	bit more modular/OO now...
	* Fixed bug where an account was recorded as being logged in even if their
	login attempt was not successful. Also fixed a client error reading bug.
	* canLoad methods for the data loaders now check if the stats are in the
	cache before delving into their IO routines.
	* And a whole lot of other bug fixes/improvements on things that I was not
	able to spot before.
	Kvj structure updated - Update your KvjCompiler and recompile your data.
	Consult the KvjBin changelog to see a list of changes in r15.

2011-02-21  GoldenKevin  (revision 11)

	* Improved "say" commands for NPC scripts. Now the "prev" button is handled
	correctly, although you have to keep in mind special cases and limitations.
	(read the comments in NpcConversationActions for more details).
	* Mozilla's latest version of Rhino (1.72R2) is now used instead of Java 6's
	modified version 1.6R2 in javax.script. 1.72R2 is much more flexible and
	contains features that I needed for efficient stateless NPC scripts. Now
	endChat hooks are supported and each NPC script doesn't require a dedicated
	thread anymore. Updated Sera script to show a bit of it's capabilities.
	(you don't have to have a endChat function and scripts don't need any
	functions. Just be sure to call the function in the global scope if you do
	want to invoke one). Be sure your classpath now includes Rhino's js.jar.
	* A bunch of other code stubs for map/channel changing, and for channel
	variables (e.g. exp, meso, and drop rates) that I will finish in the future.
	Some routines that were previously LoginClient specific are now common.

2011-02-23  GoldenKevin  (revision 12)

	* Replaced isSealed() checks with our own boolean instance variable in
	NpcConversationActions. I realized you can't seal it before throwing the
	continuation, but I can't throw the continuation before sealing it. I didn't
	catch this before because it's a very rare occurrence to have the script
	forcefully halted while in the middle of evaluation (and not while waiting
	for a response) - Rhino/JavaScript isn't THAT slow. I'm probably going to
	have to also synchronize the terminated variable, but I will leave it the
	way it is until I start get cases of it acting up.
	* NpcConversationActions.askAvatar now returns the player's selection.
	* Some InventorySlot changes. Unique IDs are now long. Corrected pet packet
	structure - footholds are now short, and the other two bytes were actually
	bools. Ring's partnerRingUid are now long (even though the current packet
	structure for rings gives it as an int).
	* Renamed GameHandler to GameEnterHandler to disambiguate it's purpose
	somewhat (since it handles connections and map entering).
	* Completely rewrote interserver communication to accommodate splitted
	worlds, i.e. so that all channels of one world don't have to be running on
	the same process (so that channels can be spread out across many servers).
	Modified game0.properties, game1.properties, and added game2.properties to
	demonstrate how to use the new features.
	* Restructured classes for interserver communications. Classes only required
	by the Center Server are now in the argonms.center package, and only the
	classes required by the remote servers (e.g. abstract classes) or required
	by both the Center Server and remote servers (e.g. packet header values) are
	located in argonms.net.server. Many classes have been renamed and overall
	there has been a huge refactoring in the structure.

2011-02-23  GoldenKevin  (revision 13)

	* Some code cleanup after that large revision I just previously committed.
	* Channel changing is now supported. Portals can now be entered and you will
	be properly warped (clients still crash when they encounter mobs though, I'm
	working on that fix right now...)
	* Renamed argonms.game.npcscript to argonms.game.script. Added a new class
	for Portal scripts and updated NpcScriptManager with quest script stubs in
	order to support quests in the future.

2011-02-27  GoldenKevin  (revision 14)

	* KvjCompiler has been updated to r16, which fixes Skill.wz compiling.
	* Renamed MapObject (and related classes) to MapEntity to disambiguate any
	confusion with Java objects. In a language where pretty much everything is
	an object, Entity suggests something more real and existential.
	* Fixed an oversight in Inventory.getFreeSlots. Added a canFitEntirely in
	InventoryTools in case we want to check if an item fits completely before
	calling InventoryTools.addToInventory (whose behavior is to fit as many as
	possible). Changed the return type of addToInventory to accommodate another
	usage for it. Fixed InventoryTools.equip, overloaded unequip to support
	cases where we want to fetch the next available slot, added isEquip(int) to
	replace usages of getCategory(int).equals("Equip"), added isTwoHanded and
	getWeaponType for future updates, and getCategory now returns an
	InventoryType (original method has been renamed to getCategoryName).
	* Mobs don't crash the game anymore, and are animated. Other players still
	cannot see when you attack them (or if you just swing your weapon), and you
	still cannot hurt them. Attack parsing/processing is very complicated and
	will take some time to be completed.
	* Skill levels of players are now saved to the database.
	SkillLevel accessor methods now return byte values.
	* Fixed Player.isVisible() returning the opposite value.
	* Items and mesos can now be dropped and picked up by players, and will
	expire properly. Fixed some visual glitches in ItemDrop. It should work with
	mob drops as well, but I still can't attack them so I can't test it (player
	inventories don't show change in meso values unless they relog because I
	still haven't coded stat updates, but they are modified internally).
	* Got the real packet send opcode for removing NPCs from a map using a
	little bit of educated guessing (I'm surprised that Vana and the more
	popular flavors of OdinMS haven't figured this one out yet). Also, NPCs now
	send their control packet to every player that joins the map (why do we have
	to do that?)
	* Only users with elevated privileges can use the /m command to change maps.
	* Fixed the access modifier of LittleEndianReader.skip. It should be public!

2011-02-27  GoldenKevin  (revision 15)

	* Fixed bug with InventoryTools.equip when equipping shields or two handed
	weapons.
	* I realized how broken endConversation still is. I guess we can only hope
	that there are no blocking operations in the scripts and that there we would
	be a quick call to any one of the NpcConversationAction methods that throw
	a ContinuationPending so that we can dispose of the script, because from
	what I see, there is no way to interrupt an executing script.
	* Replaced synchronized blocks in GameMap with a ReentrantReadWriteLock for
	better performance with the read heavy Collections. Hopefully I know my
	concurrency stuff and we won't have deadlocks arising from this update...
	* Renamed MapEntity.getShowObjectMessage to getShowEntityMessage. Missed
	that one when I went through the renaming sweep...
	* Replaced PortalActions' Player instance variable with a GameClient one.
	If the PortalActions object somehow survived and the Player would not be
	garbage collected as a result of that one reference, it would be cheaper to
	keep a GameClient instead of a Player object. I could have used a
	WeakReference<Player>, but I think a GameClient instance is more useful
	than a Player instance in the Portal's context anyway.
	* WeakReference<Player> is now used for Mob controller references in case
	a mob is still alive when the Player leaves the server. I'm not sure how I
	will use highestDamageKiller, so that still is a regular Player reference.
	* Fixed some instantiations of LittleEndianByteArrayWriter to use the
	correct amount of bytes when using the constructor that specifies the array
	size. Forgot to update some of them when I rewrote inter server comms.
	* Fixed logging for RemoteServerListener and the problem with swallowing
	exceptions. Forgot to update logging.properties when I rearranged classes
	involving inter server communication.

2011-02-27  GoldenKevin  (revision 16)

	I played around with SVN special properties a bit, and made these changes
	(Subversion/auto-props is awesome):
	* Bash scripts for Linux now have the property "svn:executable" set.
	* Added "svn:eol-style" properties that make sense for each text file -
	e.g. CHANGES, LICENSE, *.properties, *.sql, *.java, and *.js files are set
	to native; *.bat are set to CRLF; and *.sh are set to LF. Any new text files
	will also have these eol-styles based on their file extension/file name
	* Added svn:mime-type to most files (except .bat and .sh files, because they
	have mime types beginning with "application/", and that wouldn't work out
	too well with SVN's handling of diffs). *.jar files now have a mime-type of
	application/java-archive instead of the generic application/octet-stream.

2011-03-04  GoldenKevin  (revision 17)

	* Fixed Player pets not showing to rest of map, and NPC control packets not
	being sent to players. Packets had to be sent separately and could not be
	combined, so now MapEntity.getShowEntityMessage() and getCreationMessage()
	return an array of byte arrays (and their method names are now plural!) It
	may have a performance penalty for any entity that didn't send multiple
	packets when spawned, but it should increase performance of Player and NPC
	spawns (no more copying arrays). NPCs are now animated.
	* Fixed non-ranged entities not sending their creation packet to everyone in
	the map, and ranged entities sending their creation packet to everyone in
	the map (yep, I had them swapped).
	* Added a convenience method for writing a 4-byte Point to a stream and for
	reading such a Point from a stream. Refactored code accordingly.
	* PlayerLog now uses two ConcurrentHashMaps instead of monitor synchronized
	vanilla HashMaps to reduce complexity and hopefully improve performance.
	* Updated GameMap to use a separate ReadWriteLock for each Collection to
	improve performance (also fixes a deadlock when respawning monsters).
	* Somewhat solved the Center server concurrency issues by only allowing
	one server to connect at a time so that when servers that need to notify
	each other connect at the exact same time, they will not potentially miss a
	message. Also, added a disconnected variable in CenterRemoteInterface in
	case a server disconnects while there is a read going on (and we have to
	wait for a write lock before we are able to remove/null the server).
	* Channels now send their actual load instead of just an increment/decrement
	notification. This is in case a login server disconnects and reconnects and
	they don't know the previous loads. Will decrease performance somewhat
	because we have to call size() on a ConcurrentHashMap in PlayerLog instead
	of being able to send a constant true or false...
	* Renamed disconnect methods to disconnected to avoid possible confusion.
	* Fixed error in Kvj Skill.wz loading caused by prop being read an int
	instead of a short.
	* Monsters can now die from regular melee attacks. Skills, magic attacks,
	and arrow/star/bullet attacks still are still not handled yet. Respawning
	seems to be bugged, so I'll have to fix that up. Players still do not take
	damage from mobs, so I'll be working on that as well.
	* Inventory mesos count is now updated when you drop/pick up mesos.
	* Renamed argonms.loading.StatEffects to StatEffectsData and moved all of
	its constants to the class argonms.StatEffect. Likewise renamed ItemEffect
	and SkillEffect to ItemEffectsData and SkillEffectsData respectively.
	* Cooldowns should be handled properly once implemented. Execute the updated
	SQL so that you won't get database exceptions when loading/saving characters

2011-03-12  GoldenKevin  (revision 18)

	* Fixed items dropped by players not having the correct quantity.
	* Mobs now spawn first at the SpawnPoint with the lowest amount of mobs
	alive (or, whichever has the lowest nextPossibleSpawn if there are any that
	have the same amount alive), not the first spawn that was added to the map.
	* Improved some methods in LittleEndianReader and LittleEndianWriter. Bytes
	are now buffered more so that for most methods, only one method is called
	and is passed a byte array, instead of many methods being called that pass
	individual bytes. Avoids invocation overhead, and there is only one bounds
	check for ByteArrayWriter and faster performance for StreamWriter/Reader.
	* Fixed query errors when saving/loading pets.
	* Get slot max now returns 1 for pet items (if not loading from MCDB).
	* Optimized HexTool a little bit.
	* Added a stub for a command processor. Any chats that begin with an
	exclamation point (!) or an at sign (@) will not be broadcast, and will be
	sent to CommandProcessor.process(), which does nothing at the moment.

2011-03-21  GoldenKevin  (revision 19)

	* Fixed some bottlenecks in LittleEndianReader and LittleEndianWriter that
	resulted from the last update. When reading strings, we assume it is ASCII,
	so we can just assume a char is only one byte, avoiding the overhead of
	CharSet for encoding. Reading and writing 16-bit and 32-bit integers by
	copying an array is faster for Stream I/O, but the old methods worked faster
	for byte arrays. Therefore, I overloaded the read/write int and
	read/write short methods in the byte array reader/writer classes.
	* Fixed issue where you couldn't do anything after you visited a scripted
	portal that doesn't warp you anywhere (added PortalActions.abortWarp).
	* Portals point to a null map if they do not have a tm property (previously,
	they pointed to map 0, which is a perfectly valid map, but is probably
	unintended).
	* Added NPCs that will warp you from the Mushroom Town Training Camp to the
	outside world.
	* Updated KvjBin to r17. Major changes include the inclusion of mob summons
	data needed for a mob skill, the lowering of the word size of several
	integer properties, and custom mob drops. MCDB should also be able to load
	mob summons data. KvjCompiler has been tweaked as well, and all crashes and
	freezes should be fixed (I performed a full compile with no errors).
	* Fixed loading of mobs. When I fixed player skill's prop reading, I forgot
	about making the same change in mob skills.
	* Preparing for the inclusion of mob player-diseases and mob self-buffs.
	* Added preliminary take damage handler. All physical mob attacks should be
	handled correctly. No mob skills should be handled correctly at all. Healing
	through standing still now changes your hp/mp accordingly.
	* Facial expressions should now broadcast to the map.
	* MCDB now loads mob attacks. Also fixed several bugs in MCDB (mob) loading.
	* Refactored MapEntity.getShowEntityMessage/getCreationMessage. Now only a
	byte array is returned, and we send the extra data in the GameMap methods
	in order to speed up sending data for map entities that do not have extra
	packets that need to be sent.

Copyright 2011 GoldenKevin
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
